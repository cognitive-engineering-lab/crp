[[questions]]
type = "Tracing"
prompt.program = """
struct Widget {
    color: String,
}

fn main() {
    let w: Widget;
    println!("{}", w.color);
}
"""
answer.doesCompile = false
context = """
Rust does not have implicit default initialization like C++ does. Variables must
be explicitly initialized before use, or the program will fail to compile.
"""
id = "5019323d-1534-4c70-a8e7-b015f87be228"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
Which is the most idiomatic translation of the following C++ program?

```cpp
struct Vec2 {
    double x;
    double y;

    Vec2() : x(0.0), y(0.0) {}
};
```
"""
prompt.distractors = [
"""
```rust
pub struct Vec2 {
    pub x: f64;
    pub y: f64;
}

impl Vec2 {
     pub fn new() -> Self {
        Vec2 { x: 0.0, y: 0.0 }
     }
}
```
""",
"""
```rust
pub struct Vec2 {
    pub x: f64;
    pub y: f64;
}

impl Default for Vec2 {
     fn default() -> Self {
        Self::new()
     }
}
```
"""
]
answer.answer = """
```rust
pub struct Vec2 {
    pub x: f64;
    pub y: f64;
}

impl Vec2 {
     pub fn new() -> Self {
        Vec2 { x: 0.0, y: 0.0 }
     }
}

impl Default for Vec2 {
     fn default() -> Self {
        Self::new()
     }
}
```
"""
context = """
When there is a reasonable default value, it is most idiomatic in Rust to
provide [both a `new` method and an implementation of the `Default`
trait.](https://rust-lang.github.io/api-guidelines/interoperability.html?highlight=default#types-eagerly-implement-common-traits-c-common-traits)
"""
id = "a436177e-821d-45d1-8e46-4fafc3d78cd3"
