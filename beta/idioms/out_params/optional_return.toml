[[questions]]
type = "MultipleChoice"
prompt.prompt = """
Which of the following is the most idiomatic translation of C++ function into
Rust?

```cpp
#include <cstdint>

void chooseBuffer(std::size_t neededLen,
                  std::uint8_t **buffer,
                  std::size_t *bufferLen,
                  uint8_t *buf1,
                  std::size_t buf1Len,
                  uint8_t *buf2,
                  std::size_t buf2Len) {
	if (buf1Len >= neededLen) {
		*buffer = buf1;
		*bufferLen = buf1Len;
	} else if (buf2Len >= neededLen) {
		*buffer = buf2;
		*bufferLen = buf2Len;
	} else {
		*buffer = nullptr;
		*bufferLen = 0;
	}
}
```
"""
prompt.distractors = [
"""
```rust
fn choose_buffer<'a>(
    needed_len: usize,
    buffer: &mut &'a mut [u8],
    buf1: &'a mut [u8],
    buf2: &'a mut [u8],
) {
    if buf1.len() >= needed_len {
        *buffer = buf1;
    } else if buf2.len() >= needed_len {
        *buffer = buf2;
    }
}
```
""",
"""
```rust
fn choose_buffer<'a>(
    needed_len: usize,
    buffer: &mut &'a mut [u8],
    buf1: &'a mut [u8],
    buf2: &'a mut [u8],
) -> bool {
    if buf1.len() >= needed_len {
        *buffer = buf1;
        return true;
    } else if buf2.len() >= needed_len {
        *buffer = buf2;
        return true;
    }

    return false;
}
```
""",
"""
```rust
fn choose_buffer<'a>(
    needed_len: usize,
    buffer: &mut Option<&'a mut [u8]>,
    buf1: &'a mut [u8],
    buf2: &'a mut [u8],
) {
    if buf1.len() >= needed_len {
        *buffer = Some(buf1);
    } else if buf2.len() >= needed_len {
        *buffer = Some(buf2);
    } else {
        *buffer = None;
    }
}
```
"""
]
answer.answer = """
```rust
fn choose_buffer<'a>(
    needed_len: usize,
    buf1: &'a mut [u8],
    buf2: &'a mut [u8],
) -> Option<&'a mut [u8]> {
    if buf1.len() >= needed_len {
        Some(buf1)
    } else if buf2.len() >= needed_len {
        Some(buf2)
    } else {
        None
    }
}
```
"""
id = "6471e372-6552-41e9-88c6-7b7f6665928e"
