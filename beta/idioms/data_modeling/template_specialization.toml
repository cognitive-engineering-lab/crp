[[questions]]
type = "MultipleChoice"
prompt.prompt="""
The following Rust program is an approximate translation of the C++ program.
Which statements are true about them?

C++:

```cpp
#include <iostream>

template <typename T>
void displayWithType(T t) {
  std::cout << "Unknown: " << t << std::endl;
}

template <>
void displayWithType<int>(int t) {
  std::cout << "int: " << t << std::endl;
}
```

Rust:

```rust
trait TypeDisplayName {
    fn type_display_name() -> &'static str {
        "Unknown"
    }
}

impl TypeDisplayName for i32 {
    fn type_display_name() -> &'static str {
        "i32"
    }
}

use std::fmt::Display;

fn display_with_type<T: TypeDisplayName + Display>(x: T) {
    println!("{}: {}", T::type_display_name(), x);
}
```
"""
prompt.distractors = [
"""
Both `displayWithType` and `display_with_type` will display "Unknown type" for
everything other than `int` or `i32`.
""",
"""
Both `displayWithType` and `display_with_type` can be called with ANY arguments
whose types overload `<<` or implement `Display`.
"""
]
answer.answer = [
"""
Both `displayWithType` and `display_with_type` can ONLY be called with arguments
whose types overload `<<` or implement `Display`.
"""
]
context = """
> Both will display "Unknown type" for everything other than `int` or `i32`.

In both cases what will be displayed for other types will depend on
implementations/specializations elsewhere in the program.

> Both `displayWithType` and `display_with_type` can be called with ANY
> arguments whose types overload `<<` or implement `Display`.

The default function implementation `type_display_name` in the `DisplayWithType`
trait does not make it possible to call `display_with_type` on any type. Types
still need to explicitly declare that they implement the trait.
"""
id = "6ac15484-9038-45b7-9b47-f08918551d3a"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
Which of the following types is the largest?
"""
prompt.distractors = [
"""
```rust
Option<NonZero<u32>>
```
""",
"""
```rust
NonZero<u32>
```
""",
"""
```rust
u32
```
"""
]
answer.answer = "They are all the same size."
context = """
`Option<NonZero<u32>>` makes use of the niche optimization.
"""
id = "5523ba5a-2772-4700-946e-2028471ead73"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
Which of the following types is the largest?
"""
prompt.distractors = [
"""
```rust
NonZero<u32>
```
""",
"""
```rust
u32
```
""",
"They are all the same size."
]
answer.answer = """
```rust
Option<u32>
```
"""
id = "2f5fbeda-ab4a-48cc-92be-509d8191da0a"
