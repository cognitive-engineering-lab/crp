[[questions]]
type = "MultipleChoice"
prompt.prompt = """
Which is an idiomatic translation of the following C++ program?

```cpp
// colors.h
namespace colors {
  void red();
}

// colors.cc
#include "colors.h"

namespace colors {
  void red() {}

  namespace {
    void blue() {}
  }
}

// main.cc
#include "colors.h"

using namespace colors;

int main() {}
```
"""
prompt.distractors = [
# A separate file does not automatically result in a separate namespace in C++,
# but in Rust it does because of how `mod` works.
"""
```rust
// colors.rs
mod colors {
    pub fn red() {}
    fn blue() {}
}

// main.rs
mod colors;

use colors::*;

fn main() {}
```
""",
# Attempting to replicate anonymous namespaces with modules instead of using
# visibility declarations.
"""
```rust
// colors.rs
mod colors {
    fn red() {}

    mod {
        fn blue() {}
    }
}

// main.rs
mod colors;

use colors::*;

fn main() {}
```
"""
]
answer.answer ="""
```rust
// colors.rs
pub fn red() {}
fn blue() {}

// main.rs
mod colors;

use colors::*;

fn main() {}
```
"""
id = "4ed5c1ed-81e3-448d-b20a-8f0eac301489"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
In the following Rust program, which items would be visible within the `main`
function?

```rust
// a.rs
pub fn red() {}
fn orange() {}

pub mod other_colors {
    pub fn green() {}
    fn blue() {}
}

// b.rs
pub fn indigo() {}
pub fn violet() {}

// main.rs
mod a;
mod b;

use a::*;
use b::violet;

fn main() {
   // What is visible here?
}
```
"""
prompt.distractors = [
  "orange",
  "green",
  "indigo",
  "a::green",
]
answer.answer = [
  "red",
  "a::red",
  "violet",
  "b::violet",
  "other_colors::green",
  "a::other_colors::green",
]
context = """
Even if in C++ you wouldn't use namespaces to structure the program, in Rust
splitting programs into separate files also means splitting them into separate
modules.
"""
id = "eb1bde49-9ca5-4e8d-b6f3-d49c95393dfb"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
Which of the following Rust programs compile?
"""
prompt.distractors = [
"""
```rust
// a.rs
pub fn go() {}

// b.rs
pub fn go() {}

// main.rs
mod a;
mod b;

use a::*;
use b::*;

fn main() {
    go();
    println!("{}", 4);
}
```
""",
"""
```rust
// a.rs
fn go() {}

// b.rs
fn go() {}

// main.rs
mod a;
mod b;

use a::*;
use b::*;

fn main() {
    go();
    println!("{}", 4);
}
```
""",
# `mod` is not `#include`, so `use` is necessary.
"""
```rust
// a.rs
pub fn go() {}

// b.rs
fn go() {}

// main.rs
mod a;
mod b;

fn main() {
    go();
    println!("{}", 4);
}
```
"""
]
answer.answer = [
# Lack of `pub` is like putting it in an anonymous namespace in terms of
# visibility outside of the module.
"""
```rust
// a.rs
pub fn go() {}

// b.rs
fn go() {}

// main.rs
mod a;
mod b;

use a::*;
use b::*;

fn main() {
    go();
    println!("{}", 4);
}
```
""",
# Resolving ambiguous items works the same as it does with C++ namespaces.
# Ambiguous use is the error, not having conflicting names in scope.
"""
```rust
// a.rs
pub fn go() {}

// b.rs
pub fn go() {}

// main.rs
mod a;
mod b;

use a::*;
use b::*;

fn main() {
    a::go();
    println!("{}", 4);
}
```
""",
"""
```rust
// a.rs
pub fn go() {}

// b.rs
pub fn go() {}

// main.rs
mod a;
mod b;

fn main() {
    a::go();
    println!("{}", 4);
}
```
"""
]
context = """
Lack of `pub` is like putting it in an anonymous namespace in terms of
visibility outside of the defining module.

`mod` is not `#include`. `mod` defines a module, and using items from the module
requires either importing or qualification.

Resolving ambiguous items works the same as it does with C++ namespaces.
Ambiguous use is the error, not having conflicting names in scope.
"""
id = "b3c2c70b-26b7-4396-8f8a-0e21541896cf"
