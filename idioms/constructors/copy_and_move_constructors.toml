[[questions]]
type = "MultipleChoice"
prompt.prompt = """
Does the following program compile?

```rust
#[derive(Clone, Copy)]
struct BinaryTreeNode {
    value: i32,
    left_child: Option<Box<BinaryTreeNode>>,
    right_child: Option<Box<BinaryTreeNode>>,
}
```
"""
answer.answer = """
It does not compile because `Box` doesn't implement `Copy`, so `Copy` can't be
implemented for `BinaryTreeNode`.
"""
prompt.distractors = [
"""
It does compile.
""",
# Thinking Clone is implicit like a C++ copy constructor, which unique_ptr
# doesn't have, and so Box wouldn't have.
"""
It does not compile because `Box` doesn't implement `Clone`, so `Clone` can't be
derived for `BinaryTreeNode`.
""",
# Thinking Clone is like a user-defined copy constructor, while Copy is like a
# defaulted one.
"""
It does not compile because only one of `Clone` or `Copy` can be implemented for
a type.
""",
# Applying C++ rule-of-three but not understanding when it applies to Rust.
"""
It does not compile because `Drop` is not implemented for `BinaryTreeNode`
even though `Clone` is.
"""
]
context = """
A type can only implement `Copy` if all of its fields implement `Copy`, just how
in C++ a type is only trivially copyable if all of its members are. `Box` does
not implement `Copy`.
"""
id = "ec3c58d9-cb13-4f88-ac67-7c1d5baf46e2"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
Does this program compile? If not, why not?

```rust
#[derive(Copy)]
struct Age {
    value: u32,
}

impl Clone for Age {
    fn clone(&self) -> Self {
       Age {
           value: 1 + self.value,
       }
    }
}
```
"""
answer.answer = """
It does compile, but implementing `Clone` in a way that doesn't match `Copy` is
a bad idea.
"""
prompt.distractors = [
# Thinking Clone is like a user-defined copy constructor, while Copy is like a
# defaulted one.
"""
It does not compile because only one of `Clone` or `Copy` can be implemented
for a type.
""",
# Not understanding that Clone and Copy are just regular traits.
"""
It does not compile because `Clone` must be derived in order to derive `Copy`.
""",
# Applying C++ rule-of-three but not understanding when it applies to Rust.
"""
It does not compile because `Drop` is not implemented for `Age` even though
`Clone` is.
"""
]
context = """
While `Copy` requires `Clone`, it does not pose any constraints on the
implementation of clone. Even though the given implementation of `Clone` is most
certainly wrong, the program will still compile.
"""
id = "0a4bc647-44c9-4244-9dfc-3002d6abc069"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
Which is the most idiomatic translation of the following C++ program?

```cpp
struct Vec2 {
    double x;
    double y;
};
```
"""
prompt.distractors = [
"""
```rust
#[derive(Clone)]
pub struct Vec2 {
    pub x: f64,
    pub y: f64,
}
```
""",
"""
```rust
#[derive(Copy)]
pub struct Vec2 {
    pub x: f64,
    pub y: f64,
}
```
""",
"""
```rust
pub struct Vec2 {
    pub x: f64,
    pub y: f64,
}
```
"""
]
answer.answer = """
```rust
#[derive(Clone, Copy)]
pub struct Vec2 {
    pub x: f64,
    pub y: f64,
}
```
"""
context = """
The C++ `Vec2` implements a copy constructor which corresponds to the `Clone`
trait in Rust. It is also trivially copyable, which corresponds to implementing
the `Copy` trait in Rust.
"""
id = "4636f71a-599b-46d3-a6e6-e0c35b344140"

[[questions]]
type = "MultipleChoice"
prompt.prompt = """
Which is the most idiomatic translation of the following C++ program?

```cpp
struct Vec2 {
    double x;
    double y;

    Vec2(const Vec2 &other) : x(other.x), y(other.y) {};
};
```
"""
prompt.distractors = [
"""
```rust
#[derive(Clone, Copy)]
pub struct Vec2 {
    pub x: f64,
    pub y: f64,
}
```
""",
"""
```rust
#[derive(Copy)]
pub struct Vec2 {
    pub x: f64,
    pub y: f64,
}
```
""",
"""
```rust
pub struct Vec2 {
    pub x: f64,
    pub y: f64,
}
```
"""
]
answer.answer = """
```rust
#[derive(Clone)]
pub struct Vec2 {
    pub x: f64,
    pub y: f64,
}
```
"""
context = """
The C++ `Vec2` has a user-defined copy constructor which corresponds to the
`Clone` trait in Rust. Despite being user-defined, it does exactly what the
default trait would do. Because the implementation is user-defined, it prevents
the type from being trivially copyable, which corresponds to not implementing
the `Copy` trait in Rust.
"""
id = "c8e3b4da-19a1-42e9-97d4-bbb61dcd5652"
